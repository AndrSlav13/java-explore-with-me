{
	"info": {
		"_postman_id": "ef0813d1-ea69-440b-a200-e320ba2f0264",
		"name": "Tesis Jandex-Practicum Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24142574"
	},
	"item": [
		{
			"name": "Tesis Tests - Tests For Feature Comments",
			"item": [
				{
					"name": "Добавление нового комментария к событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        comment = rnd.getComment();\r",
									"\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, childComments\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('commenter');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('childComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal(source.message, 'Комментарий события должен соответствовать комментарию события в запросе');\r",
									"    pm.expect(target.event.title).equal(event, 'Заголовок события должен быть одинаков в запросе и ответе');\r",
									"    pm.expect(target.commenter.name).equal(user, 'Имя комментатора должно быть одинаково в запросе и ответе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "id пользователя"
								},
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "id события"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Заявка на модерацию от пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    const requestUpdate = rnd.getUpdateCommentUser();\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        const comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"        pm.collectionVariables.set('commentMessage', comment.message);\r",
									"        pm.collectionVariables.set('comid', comment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(requestUpdate),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"const comment = pm.collectionVariables.get('commentMessage');\r",
									"const commentId = parseInt(pm.collectionVariables.get('comid'));\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, event, message, commenter, publishedOn, childComments\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('commenter');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('childComments');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/events/comments/\" + commentId,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Проверка вывода оставшихся комментариев\", function () {\r",
									"                pm.expect(response.code).to.eql(200);\r",
									"                const target2 = response.json();\r",
									"                pm.expect(target2).to.have.property('id');\r",
									"                pm.expect(target2).to.have.property('event');\r",
									"                pm.expect(target2).to.have.property('message');\r",
									"                pm.expect(target2).to.have.property('commenter');\r",
									"                pm.expect(target2).to.have.property('publishedOn');\r",
									"                pm.expect(target2).to.have.property('commentDetails');\r",
									"                pm.expect(target2.message).equal(comment, 'Проверка id комментария');\r",
									"                pm.expect(target2.commentDetails.stateComment).equal(source.state, 'Проверка поля state из заявки');\r",
									"                pm.expect(target2.commentDetails.description).equal(source.description, 'Проверка поля description из заявки');\r",
									"            });\r",
									"        });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Модерация админа",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    const requestUpdate = rnd.getUpdateCommentAdmin();\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        const comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"        pm.collectionVariables.set('commentMessage', comment.message);\r",
									"        pm.collectionVariables.set('comid', comment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(requestUpdate),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"const comment = pm.collectionVariables.get('commentMessage');\r",
									"const commentId = parseInt(pm.collectionVariables.get('comid'));\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, commentDetails\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('commenter');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('commentDetails');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/events/comments/\" + commentId,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Проверка вывода комментария\", function () {\r",
									"                pm.expect(response.code).to.eql(200);\r",
									"                const target2 = response.json();\r",
									"                pm.expect(target2).to.have.property('id');\r",
									"                pm.expect(target2).to.have.property('event');\r",
									"                pm.expect(target2).to.have.property('message');\r",
									"                pm.expect(target2).to.have.property('commenter');\r",
									"                pm.expect(target2).to.have.property('publishedOn');\r",
									"                pm.expect(target2).to.have.property('commentDetails');\r",
									"                pm.expect(target2.id).equal(commentId, 'Проверка id комментария');\r",
									"                pm.expect(target2.message).equal(source.message, 'Проверка изменения админом текста комментария');\r",
									"                pm.expect(target2.commentDetails.stateComment).equal(source.state, 'Проверка поля state из заявки');\r",
									"                pm.expect(target2.commentDetails.description).equal(source.description, 'Проверка поля description из заявки');\r",
									"            });\r",
									"        });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария к комментарию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let commentRequest;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        const comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"        commentRequest = rnd.getComment();\r",
									"\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(commentRequest),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, childComments\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('commenter');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('childComments');\r",
									"pm.expect(target.childComments[0]).to.have.property('id');\r",
									"pm.expect(target.childComments[0]).to.have.property('event');\r",
									"pm.expect(target.childComments[0]).to.have.property('message');\r",
									"pm.expect(target.childComments[0]).to.have.property('commenter');\r",
									"pm.expect(target.childComments[0]).to.have.property('publishedOn');\r",
									"pm.expect(target.childComments[0]).to.have.property('childComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.childComments[0].message).equal(source.message, 'Комментарий события должен соответствовать комментарию события в запросе');\r",
									"    pm.expect(target.event.title).equal(event, 'Заголовок события должен быть одинаков в запросе и ответе');\r",
									"    pm.expect(target.commenter.name).equal(user, 'Имя комментатора должно быть одинаково в запросе и ответе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{comid}}",
									"description": "id комментария"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нескольких комментариев",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let commentRequest;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        let comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"        commentRequest = rnd.getComment();\r",
									"\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(commentRequest),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, childComments\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('commenter');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('childComments');\r",
									"pm.expect(target.childComments[0]).to.have.property('id');\r",
									"pm.expect(target.childComments[0]).to.have.property('event');\r",
									"pm.expect(target.childComments[0]).to.have.property('message');\r",
									"pm.expect(target.childComments[0]).to.have.property('commenter');\r",
									"pm.expect(target.childComments[0]).to.have.property('publishedOn');\r",
									"pm.expect(target.childComments[0]).to.have.property('childComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.childComments[0].message).equal(source.message, 'Комментарий события должен соответствовать комментарию события в запросе');\r",
									"    pm.expect(target.event.title).equal(event, 'Заголовок события должен быть одинаков в запросе и ответе');\r",
									"    pm.expect(target.commenter.name).equal(user, 'Имя комментатора должно быть одинаково в запросе и ответе');\r",
									"    pm.expect(target.childComments.length).equal(1, 'При добавлении комментария выводится корневой комментарий и добавленный');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{comid}}",
									"description": "id комментария"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Вывод всех комментариев",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let commentWithSubComments;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        let comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"\r",
									"        setTimeout(async () => {\r",
									"        comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        commentWithSubComments = comment;\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        \r",
									"        pm.collectionVariables.set('commentMessage', commentWithSubComments.message);\r",
									"        pm.collectionVariables.set('comid', commentWithSubComments.id);\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"        }, 1000);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: \"{}\",\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 2000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"const comment = pm.collectionVariables.get('commentMessage');\r",
									"const commentId = parseInt(pm.collectionVariables.get('comid'));\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, childComments\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('message');\r",
									"pm.expect(target[0]).to.have.property('commenter');\r",
									"pm.expect(target[0]).to.have.property('publishedOn');\r",
									"pm.expect(target[0]).to.have.property('childComments');\r",
									"pm.expect(target[1]).to.have.property('id');\r",
									"pm.expect(target[1]).to.have.property('event');\r",
									"pm.expect(target[1]).to.have.property('message');\r",
									"pm.expect(target[1]).to.have.property('commenter');\r",
									"pm.expect(target[1]).to.have.property('publishedOn');\r",
									"pm.expect(target[1]).to.have.property('childComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).equal(2, '2 комментария к событию');\r",
									"    pm.expect(target[0].childComments.length).equal(2, '2 комментария к комментарию');\r",
									"    pm.expect(target[0].id).equal(commentId, 'Проверка id комментария с вложенными комментариями');\r",
									"    pm.expect(target[0].message).equal(comment, 'Проверка поля message комментария с вложенными комментариями');\r",
									"    pm.expect(target[0].event.title).equal(event, 'Проверка заголовка события');\r",
									"    pm.expect(target[0].commenter.name).equal(user, 'Имя комментатора должно быть одинаково в запросе и ответе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Вывод всех комментариев админом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        let comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set('commentMessage', comment.message);\r",
									"        pm.collectionVariables.set('comid', comment.id);\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"\r",
									"        setTimeout(async () => {\r",
									"        comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        }, 1000);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: \"{}\",\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 2000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"const comment = pm.collectionVariables.get('commentMessage');\r",
									"const commentId = parseInt(pm.collectionVariables.get('comid'));\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, childComments\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('message');\r",
									"pm.expect(target[0]).to.have.property('commenter');\r",
									"pm.expect(target[0]).to.have.property('publishedOn');\r",
									"pm.expect(target[1]).to.have.property('id');\r",
									"pm.expect(target[1]).to.have.property('event');\r",
									"pm.expect(target[1]).to.have.property('message');\r",
									"pm.expect(target[1]).to.have.property('commenter');\r",
									"pm.expect(target[1]).to.have.property('publishedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).equal(4, '4 комментария к событию');\r",
									"    pm.expect(target[3].id).equal(commentId, 'Проверка id комментария с вложенными комментариями');\r",
									"    pm.expect(target[3].message).equal(comment, 'Проверка поля message комментария с вложенными комментариями');\r",
									"    pm.expect(target[3].event.title).equal(event, 'Проверка заголовка события');\r",
									"    pm.expect(target[3].commenter.name).equal(user, 'Имя комментатора должно быть одинаково в запросе и ответе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Вывод всех комментариев к событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let commentWithSubComments;\r",
									"    let commentRequest;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        let comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"\r",
									"        setTimeout(async () => {\r",
									"        comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        commentWithSubComments = comment;\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        \r",
									"        pm.collectionVariables.set('commentMessage', commentWithSubComments.message);\r",
									"        pm.collectionVariables.set('comid', commentWithSubComments.id);\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"        }, 1000);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: \"{}\",\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 2000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"const comment = pm.collectionVariables.get('commentMessage');\r",
									"const commentId = parseInt(pm.collectionVariables.get('comid'));\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, childComments\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('message');\r",
									"pm.expect(target[0]).to.have.property('commenter');\r",
									"pm.expect(target[0]).to.have.property('publishedOn');\r",
									"pm.expect(target[0]).to.have.property('childComments');\r",
									"pm.expect(target[1]).to.have.property('id');\r",
									"pm.expect(target[1]).to.have.property('event');\r",
									"pm.expect(target[1]).to.have.property('message');\r",
									"pm.expect(target[1]).to.have.property('commenter');\r",
									"pm.expect(target[1]).to.have.property('publishedOn');\r",
									"pm.expect(target[1]).to.have.property('childComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.length).equal(2, '2 комментария к событию');\r",
									"    pm.expect(target[0].childComments.length).equal(2, '2 комментария к комментарию');\r",
									"    pm.expect(target[0].id).equal(commentId, 'Проверка id комментария с вложенными комментариями');\r",
									"    pm.expect(target[0].message).equal(comment, 'Проверка поля message комментария с вложенными комментариями');\r",
									"    pm.expect(target[0].event.title).equal(event, 'Проверка заголовка события');\r",
									"    pm.expect(target[0].commenter.name).equal(user, 'Имя комментатора должно быть одинаково в запросе и ответе');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/events/comments/\" + 0,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий id=\" + 0 + \" не должен быть найден\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Вывод комментария к событию - админ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let commentWithSubComments;\r",
									"    let commentRequest;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        let comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"\r",
									"        setTimeout(async () => {\r",
									"        comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        commentWithSubComments = comment;\r",
									"        pm.collectionVariables.set(\"comid\", comment.id);\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"        \r",
									"        pm.collectionVariables.set('commentMessage', commentWithSubComments.message);\r",
									"        pm.collectionVariables.set('comid', commentWithSubComments.id);\r",
									"        pm.collectionVariables.set('eventTitle', event.title);\r",
									"        pm.collectionVariables.set('userName', user.name);\r",
									"        }, 1000);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: \"{}\",\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 2000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"const comment = pm.collectionVariables.get('commentMessage');\r",
									"const commentId = parseInt(pm.collectionVariables.get('comid'));\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, childComments\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('commenter');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(commentId, 'Проверка id комментария с вложенными комментариями');\r",
									"    pm.expect(target.message).equal(comment, 'Проверка поля message комментария с вложенными комментариями');\r",
									"    pm.expect(target.event.title).equal(event, 'Проверка заголовка события');\r",
									"    pm.expect(target.commenter.name).equal(user, 'Имя комментатора должно быть одинаково в запросе и ответе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Удаление комментария админом - orphanRemoval",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let commentWithoutSubComments;\r",
									"    let all;\r",
									"    try {\r",
									"        let user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        let category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        let comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        commentWithoutSubComments = comment;\r",
									"        \r",
									"        setTimeout(async () => {\r",
									"            let comment2 = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"            pm.collectionVariables.set(\"comid\", comment2.id);\r",
									"            let comment3 = await api.addCommentToComment(user.id, comment2.id, rnd.getComment());\r",
									"            let comment4 = await api.addCommentToComment(user.id, comment3.id, rnd.getComment());\r",
									"            all = await api.getComment(user.id, event.id);\r",
									"            all = JSON.parse(all);\r",
									"            pm.collectionVariables.set('commentMessage', commentWithoutSubComments.message);\r",
									"            pm.collectionVariables.set('comida', commentWithoutSubComments.id);\r",
									"            pm.collectionVariables.set('eventTitle', event.title);\r",
									"            pm.collectionVariables.set('userName', user.name);\r",
									"            pm.collectionVariables.set('comment2Message', all[0].message);\r",
									"            pm.collectionVariables.set('comidb', all[\"0\"][\"id\"]);\r",
									"            pm.collectionVariables.set('comidba', all[\"0\"][\"childComments\"][\"0\"][\"id\"]);\r",
									"            pm.collectionVariables.set('comidbb', all[\"0\"][\"childComments\"][\"1\"][\"id\"]);\r",
									"            console.log(\"-------------------addCommentToEvent \" + all[0].id + \" \" + all + \"---------\");\r",
									"        }, 1000);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: \"{}\",\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 4000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 202 и данные в формате json - вывод удаленного комментария\", function () {\r",
									"    pm.response.to.have.status(202);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const eid = parseInt(pm.collectionVariables.get('eid'));\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"const commentWithoutSubCommentsMessage = pm.collectionVariables.get('commentMessage');\r",
									"const commentWithoutSubCommentsId = parseInt(pm.collectionVariables.get('comida'));\r",
									"const allEventCommentsMessage = pm.collectionVariables.get('comment2Message');\r",
									"let allId0 = parseInt(pm.collectionVariables.get('comidb'));\r",
									"let allId1 = parseInt(pm.collectionVariables.get('comidba'));\r",
									"let allId2 = parseInt(pm.collectionVariables.get('comidbb'));\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, event, message, commenter, publishedOn, commentDetails\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('commenter');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('commentDetails');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным удаленного комментария\", function () {\r",
									"    pm.expect(target.id).equal(allId0, 'Проверка id комментария');\r",
									"    pm.expect(target.message).equal(allEventCommentsMessage, 'Проверка поля message комментария');\r",
									"    pm.expect(target.event.title).equal(event, 'Проверка заголовка события');\r",
									"    pm.expect(target.commenter.name).equal(user, 'Имя комментатора удаляемого комментария');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/events/comments/\" + allId0,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий id=\" + allId0 + \" не должен быть найден после удаления\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/events/comments/\" + allId1,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий id=\" + allId1 + \" к удаленному комментарию также должен быть удален\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/events/comments/\" + allId2,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий id=\" + allId2 + \" к удаленному комментарию также должен быть удален\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/events/comments?eventId=\" + eid,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Проверка вывода оставшихся комментариев\" + eid, function () {\r",
									"                pm.expect(response.code).to.eql(200);\r",
									"                const target2 = response.json();\r",
									"                pm.expect(target2[0]).to.have.property('id');\r",
									"                pm.expect(target2[0]).to.have.property('event');\r",
									"                pm.expect(target2[0]).to.have.property('message');\r",
									"                pm.expect(target2[0]).to.have.property('commenter');\r",
									"                pm.expect(target2[0]).to.have.property('publishedOn');\r",
									"                pm.expect(target2[0]).to.have.property('childComments');\r",
									"                pm.expect(target2.length).equal(1, 'Должен остаться один комментарий');\r",
									"                pm.expect(target2[0].childComments.length).equal(0, 'Оставшийся комментарий не должен иметь вложенных');\r",
									"                pm.expect(target2[0].id).equal(commentWithoutSubCommentsId, 'Проверка id оставшегося комментария');\r",
									"            });\r",
									"        });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Удаление комментария автором- orphanRemoval",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let commentWithoutSubComments;\r",
									"    let allEventComments;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        let comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"        commentWithoutSubComments = comment;\r",
									"\r",
									"        setTimeout(async () => {\r",
									"            comment = await api.addCommentToEvent(user.id, event.id, rnd.getComment());\r",
									"            comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"            comment = await api.addCommentToComment(user.id, comment.id, rnd.getComment());\r",
									"            allEventComments = await api.getComment(user.id, event.id);\r",
									"            pm.collectionVariables.set(\"comid\", allEventComments[0].childComments[1].id);\r",
									"            pm.collectionVariables.set('commentMessage', commentWithoutSubComments.message);\r",
									"            pm.collectionVariables.set('comid1', commentWithoutSubComments.id);\r",
									"            pm.collectionVariables.set('eventTitle', event.title);\r",
									"            pm.collectionVariables.set('userName', user.name);\r",
									"            pm.collectionVariables.set('comment2Message', allEventComments[0].message);\r",
									"            pm.collectionVariables.set('comid2', allEventComments[0].id);\r",
									"            pm.collectionVariables.set('comid20', allEventComments[0].childComments[0].id);\r",
									"            pm.collectionVariables.set('comid21', allEventComments[0].childComments[1].id);\r",
									"        }, 1000);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: \"{}\",\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 4000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);  \r",
									"});\r",
									"\r",
									"const event = pm.collectionVariables.get('eventTitle');\r",
									"const eid = parseInt(pm.collectionVariables.get('eid'));\r",
									"const user = pm.collectionVariables.get('userName');\r",
									"const commentWithoutSubCommentsMessage = pm.collectionVariables.get('commentMessage');\r",
									"const commentWithoutSubCommentsId = parseInt(pm.collectionVariables.get('comid1'));\r",
									"const allEventCommentsMessage = pm.collectionVariables.get('comment2Message');\r",
									"const allEventCommentsId0 = parseInt(pm.collectionVariables.get('comid2'));\r",
									"const allEventCommentsId1 = parseInt(pm.collectionVariables.get('comid20'));\r",
									"const allEventCommentsId2 = parseInt(pm.collectionVariables.get('comid21'));\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/events/comments/\" + allEventCommentsId2,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий id=\" + allEventCommentsId2 + \" должен быть удален\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/events/comments/\" + allEventCommentsId1,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий id=\" + allEventCommentsId1 + \" должен существовать\", function () {\r",
									"                pm.expect(response.code).to.eql(200);\r",
									"            });\r",
									"        });\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/events/comments?eventId=\" + eid,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Проверка вывода оставшихся комментариев\", function () {\r",
									"                pm.expect(response.code).to.eql(200);\r",
									"                const target2 = response.json();\r",
									"                pm.expect(target2[0]).to.have.property('id');\r",
									"                pm.expect(target2[0]).to.have.property('event');\r",
									"                pm.expect(target2[0]).to.have.property('message');\r",
									"                pm.expect(target2[0]).to.have.property('commenter');\r",
									"                pm.expect(target2[0]).to.have.property('publishedOn');\r",
									"                pm.expect(target2[0]).to.have.property('childComments');\r",
									"                pm.expect(target2.length).equal(2, '2 комментария к событию');\r",
									"                pm.expect(target2[0].childComments.length).equal(1, 'Должен быть 1 вложенный комментарий');\r",
									"                pm.expect(target2[0].childComments[0].id).equal(allEventCommentsId1, 'Проверка id комментария');\r",
									"            });\r",
									"        });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "{{comid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        userId = parseInt(userId);",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async patchComment(userId, commentId, body, verbose=null) {",
					"        userId = parseInt(userId);",
					"        commentId = parseInt(commentId);",
					"        return this.patch(\"/users/\" + userId + \"/events/comments/\" + commentId, body, \"Ошибка при добавлении нового комментария к событию: \", verbose);",
					"    }",
					"",
					"    async patchCommentAdmin(commentId, body, verbose=null) {",
					"        commentId = parseInt(commentId);",
					"        return this.patch(\"/admin/events/comments/\" + commentId, body, \"Ошибка при добавлении нового комментария к событию: \", verbose);",
					"    }",
					"",
					"    async addCommentToEvent(userId, eventId, comment, verbose=null) {",
					"        userId = parseInt(userId);",
					"        eventId = parseInt(eventId);",
					"        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", comment, \"Ошибка при добавлении нового комментария к событию: \", verbose);",
					"    }",
					"",
					"    async addCommentToComment(userId, commentId, comment, verbose=null) {",
					"        userId = parseInt(userId);",
					"        commentId = parseInt(commentId);",
					"        return this.post(\"/users/\" + userId + \"/events/comments/\" + commentId, comment, \"Ошибка при добавлении нового комментария к комментарию: \", verbose);",
					"    }",
					"",
					"    async getComment(userId, eventId, verbose=null) {",
					"        userId = parseInt(userId);",
					"        eventId = parseInt(eventId);",
					"        return this.get(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", null, \"Ошибка при получении комментариев: \", verbose);",
					"    }",
					"",
					"    async deleteComment(commentId, verbose=null) {",
					"        commentId = parseInt(commentId);",
					"        return this.delete(\"/admin/events/comments/\" + commentId, {}, \"Ошибка при удалении коментария: \", verbose);",
					"    }",
					"",
					"    async deleteCommentByAuthor(userId, commentId, verbose=null) {",
					"        userId = parseInt(userId);",
					"        commentId = parseInt(commentId);",
					"        return this.delete(\"/users/\" + userId + \"/events/comments/\" + commentId, {}, \"Ошибка при удалении коментария автором: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async delete(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"DELETE\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            message: pm.variables.replaceIn('{{$randomLoremSentence}}')",
					"        };",
					"    }",
					"",
					"    getUpdateCommentUser() {",
					"        return {",
					"            state: pm.variables.replaceIn('MODERATION'),",
					"            description: pm.variables.replaceIn('{{$randomLoremSentence}}')",
					"        };",
					"    }",
					"",
					"    getUpdateCommentAdmin() {",
					"        return {",
					"            state: pm.variables.replaceIn('MODERATION'),",
					"            description: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            message: pm.variables.replaceIn('{{$randomLoremSentence}}')",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "store",
			"value": "",
			"type": "string"
		},
		{
			"key": "comid",
			"value": "",
			"type": "string"
		},
		{
			"key": "userName",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentMessage",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventTitle",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment2Message",
			"value": "",
			"type": "string"
		},
		{
			"key": "comidb",
			"value": "",
			"type": "string"
		},
		{
			"key": "comidba",
			"value": "",
			"type": "string"
		},
		{
			"key": "comidbb",
			"value": "",
			"type": "string"
		},
		{
			"key": "comida",
			"value": "",
			"type": "string"
		}
	]
}